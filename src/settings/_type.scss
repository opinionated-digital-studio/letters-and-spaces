@use 'helpers' as *;

////
/// @group settings/type
////

/// Base vertical unit map per breakpoint
///
/// @type Map
/// @access public

$base-vertical-unit: (
  null: 6px,
  tablet: 6px,
  desktop: 6px
) !default;

/// Base font size multiplier per breakpoint.
/// The values in this map are multiplied by the corresponding
/// base vertical units to get the base font size in pixels per breakpoint.
///
/// @type Map
/// @access public

$base-font-size-multiplier: (
  null: 3,
  tablet: 3,
  desktop: 4
) !default;

/// Base line height multiplier per breakpoint.
/// The values in this map are multiplied by the corresponding
/// base vertical units to get the base line height per breakpoint.
///
/// @type Map
/// @access public

$base-line-height-multiplier: (
  null: 4,
  tablet: 4,
  desktop: 6
) !default;

/// Typescale ratios to use within the modular typography system per breakpoint.
/// See https://alistapart.com/article/more-meaningful-typography/
///
/// @type Map
/// @access public

$typescale-ratios: (
  null: get-typescale-ratio('minor-second'),
  tablet: get-typescale-ratio('minor-second'),
  desktop: get-typescale-ratio('minor-third')
) !default;

$base-type: ();

@each $breakpoint, $value in $base-vertical-unit {
  $map: ();
  $font-size-multiplier: map-get($base-font-size-multiplier, $breakpoint);
  $line-height-multiplier: map-get($base-line-height-multiplier, $breakpoint);
  $typescale-ratio: map-get($typescale-ratios, $breakpoint);
  $map: map-merge($map, ($breakpoint: create-base-type-map($value, $font-size-multiplier, $line-height-multiplier, $typescale-ratio)));
  $base-type: map-merge($base-type, $map);
}

